[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "polymarket-client"
version = "0.1.0"
description = "Python SDK for Polymarket prediction market platform"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    {name = "Max Zhang"}
]
license = {text = "MIT"}
keywords = ["prediction-markets", "polymarket", "trading", "api", "sdk"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "aiohttp==3.12.13",
    "psutil>=6.0.0",
    "py-clob-client==0.23.0",
    "py-order-utils==0.3.2",
    "pydantic==2.10.5",
    "python-dotenv==1.1.1",
    "requests==2.32.3",
    "web3==7.12.0",
]

[project.optional-dependencies]
dev = [
    "pytest==8.3.4",
    "pytest-cov==6.0.0",
    "pytest-mock==3.12.0",
    "ruff==0.12.2",
    "black==24.10.0",
    "mypy==1.13.0",
    "pre-commit==4.0.1",
    "bandit[toml]==1.8.6",
    "safety>=3.2.0,<4.0.0",
    "pip-audit==2.9.0",
]

[tool.uv.workspace]
members = [
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src/polymarket_client",
    "--cov-report=html",
    "--cov-report=term",
    "--cov-report=term-missing",
    "--cov-fail-under=80"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests"
]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py313"
respect-gitignore = true
extend-exclude = ["migrations"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "S101",   # Use of assert
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Use of assert in tests
    "ARG",    # Unused function args in tests
    "PLR2004", # Magic value used in comparison
]
"examples/**/*.py" = [
    "T20",    # Allow print in examples
    "T201",   # Allow print() in examples
]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "py_clob_client.*",
    "py_order_utils.*",
]
ignore_missing_imports = true

# Ignore docstring import examples during development
[[tool.mypy.overrides]]
module = "src"
disable_error_code = ["name-defined"]

# Coverage configuration
[tool.coverage.run]
source = ["src/polymarket_client"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[dependency-groups]
dev = [
    "pytest-cov>=6.0.0",
    "ruff==0.12.2",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101"]  # Skip assert_used test

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"]
